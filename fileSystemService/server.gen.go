// Package fileSystemService provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package fileSystemService

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// Error defines model for Error.
type Error struct {
	Message string `json:"message"`
}

// FileTreeEntry defines model for FileTreeEntry.
type FileTreeEntry struct {
	IsDir bool   `json:"isDir"`
	Path  string `json:"path"`
}

// FileTreePath defines model for FileTreePath.
type FileTreePath struct {
	Path string `json:"path"`
}

// BadRequest defines model for BadRequest.
type BadRequest = Error

// NonLocalPath defines model for NonLocalPath.
type NonLocalPath = Error

// PathNotFound defines model for PathNotFound.
type PathNotFound = Error

// PostFileTreeJSONRequestBody defines body for PostFileTree for application/json ContentType.
type PostFileTreeJSONRequestBody = FileTreeEntry

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Download plain/text file
	// (GET /file/{filePath})
	GetFileFilePath(w http.ResponseWriter, r *http.Request, filePath string)
	// Update file
	// (PUT /file/{filePath})
	PutFileFilePath(w http.ResponseWriter, r *http.Request, filePath string)
	// List paths in root
	// (GET /fileTree)
	GetFileTree(w http.ResponseWriter, r *http.Request)
	// Add new path
	// (POST /fileTree)
	PostFileTree(w http.ResponseWriter, r *http.Request)
	// Delete path
	// (DELETE /fileTree/{path})
	DeleteFileTreePath(w http.ResponseWriter, r *http.Request, path string)
	// List nested paths
	// (GET /fileTree/{path})
	GetFileTreePath(w http.ResponseWriter, r *http.Request, path string)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Download plain/text file
// (GET /file/{filePath})
func (_ Unimplemented) GetFileFilePath(w http.ResponseWriter, r *http.Request, filePath string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update file
// (PUT /file/{filePath})
func (_ Unimplemented) PutFileFilePath(w http.ResponseWriter, r *http.Request, filePath string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List paths in root
// (GET /fileTree)
func (_ Unimplemented) GetFileTree(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Add new path
// (POST /fileTree)
func (_ Unimplemented) PostFileTree(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete path
// (DELETE /fileTree/{path})
func (_ Unimplemented) DeleteFileTreePath(w http.ResponseWriter, r *http.Request, path string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List nested paths
// (GET /fileTree/{path})
func (_ Unimplemented) GetFileTreePath(w http.ResponseWriter, r *http.Request, path string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetFileFilePath operation middleware
func (siw *ServerInterfaceWrapper) GetFileFilePath(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "filePath" -------------
	var filePath string

	err = runtime.BindStyledParameterWithOptions("simple", "filePath", chi.URLParam(r, "filePath"), &filePath, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filePath", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetFileFilePath(w, r, filePath)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PutFileFilePath operation middleware
func (siw *ServerInterfaceWrapper) PutFileFilePath(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "filePath" -------------
	var filePath string

	err = runtime.BindStyledParameterWithOptions("simple", "filePath", chi.URLParam(r, "filePath"), &filePath, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filePath", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutFileFilePath(w, r, filePath)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetFileTree operation middleware
func (siw *ServerInterfaceWrapper) GetFileTree(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetFileTree(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostFileTree operation middleware
func (siw *ServerInterfaceWrapper) PostFileTree(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostFileTree(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteFileTreePath operation middleware
func (siw *ServerInterfaceWrapper) DeleteFileTreePath(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "path" -------------
	var path string

	err = runtime.BindStyledParameterWithOptions("simple", "path", chi.URLParam(r, "path"), &path, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "path", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteFileTreePath(w, r, path)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetFileTreePath operation middleware
func (siw *ServerInterfaceWrapper) GetFileTreePath(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "path" -------------
	var path string

	err = runtime.BindStyledParameterWithOptions("simple", "path", chi.URLParam(r, "path"), &path, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "path", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetFileTreePath(w, r, path)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/file/{filePath}", wrapper.GetFileFilePath)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/file/{filePath}", wrapper.PutFileFilePath)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/fileTree", wrapper.GetFileTree)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/fileTree", wrapper.PostFileTree)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/fileTree/{path}", wrapper.DeleteFileTreePath)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/fileTree/{path}", wrapper.GetFileTreePath)
	})

	return r
}

type BadRequestJSONResponse Error

type NonLocalPathJSONResponse Error

type PathNotFoundJSONResponse Error

type GetFileFilePathRequestObject struct {
	FilePath string `json:"filePath"`
}

type GetFileFilePathResponseObject interface {
	VisitGetFileFilePathResponse(w http.ResponseWriter) error
}

type GetFileFilePath200PlaintextResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response GetFileFilePath200PlaintextResponse) VisitGetFileFilePathResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "plain/text")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type GetFileFilePath400JSONResponse struct{ BadRequestJSONResponse }

func (response GetFileFilePath400JSONResponse) VisitGetFileFilePathResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetFileFilePath404JSONResponse struct{ PathNotFoundJSONResponse }

func (response GetFileFilePath404JSONResponse) VisitGetFileFilePathResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PutFileFilePathRequestObject struct {
	FilePath string `json:"filePath"`
	Body     io.Reader
}

type PutFileFilePathResponseObject interface {
	VisitPutFileFilePathResponse(w http.ResponseWriter) error
}

type PutFileFilePath200Response struct {
}

func (response PutFileFilePath200Response) VisitPutFileFilePathResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PutFileFilePath400JSONResponse struct{ BadRequestJSONResponse }

func (response PutFileFilePath400JSONResponse) VisitPutFileFilePathResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PutFileFilePath404JSONResponse struct{ PathNotFoundJSONResponse }

func (response PutFileFilePath404JSONResponse) VisitPutFileFilePathResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetFileTreeRequestObject struct {
}

type GetFileTreeResponseObject interface {
	VisitGetFileTreeResponse(w http.ResponseWriter) error
}

type GetFileTree200JSONResponse []FileTreeEntry

func (response GetFileTree200JSONResponse) VisitGetFileTreeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostFileTreeRequestObject struct {
	Body *PostFileTreeJSONRequestBody
}

type PostFileTreeResponseObject interface {
	VisitPostFileTreeResponse(w http.ResponseWriter) error
}

type PostFileTree201JSONResponse FileTreePath

func (response PostFileTree201JSONResponse) VisitPostFileTreeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostFileTree400JSONResponse struct{ NonLocalPathJSONResponse }

func (response PostFileTree400JSONResponse) VisitPostFileTreeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostFileTree409JSONResponse Error

func (response PostFileTree409JSONResponse) VisitPostFileTreeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type DeleteFileTreePathRequestObject struct {
	Path string `json:"path"`
}

type DeleteFileTreePathResponseObject interface {
	VisitDeleteFileTreePathResponse(w http.ResponseWriter) error
}

type DeleteFileTreePath200JSONResponse FileTreePath

func (response DeleteFileTreePath200JSONResponse) VisitDeleteFileTreePathResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteFileTreePath400JSONResponse struct{ NonLocalPathJSONResponse }

func (response DeleteFileTreePath400JSONResponse) VisitDeleteFileTreePathResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteFileTreePath404JSONResponse struct{ PathNotFoundJSONResponse }

func (response DeleteFileTreePath404JSONResponse) VisitDeleteFileTreePathResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetFileTreePathRequestObject struct {
	Path string `json:"path"`
}

type GetFileTreePathResponseObject interface {
	VisitGetFileTreePathResponse(w http.ResponseWriter) error
}

type GetFileTreePath200JSONResponse []FileTreeEntry

func (response GetFileTreePath200JSONResponse) VisitGetFileTreePathResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetFileTreePath400JSONResponse struct{ NonLocalPathJSONResponse }

func (response GetFileTreePath400JSONResponse) VisitGetFileTreePathResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetFileTreePath404JSONResponse struct{ PathNotFoundJSONResponse }

func (response GetFileTreePath404JSONResponse) VisitGetFileTreePathResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Download plain/text file
	// (GET /file/{filePath})
	GetFileFilePath(ctx context.Context, request GetFileFilePathRequestObject) (GetFileFilePathResponseObject, error)
	// Update file
	// (PUT /file/{filePath})
	PutFileFilePath(ctx context.Context, request PutFileFilePathRequestObject) (PutFileFilePathResponseObject, error)
	// List paths in root
	// (GET /fileTree)
	GetFileTree(ctx context.Context, request GetFileTreeRequestObject) (GetFileTreeResponseObject, error)
	// Add new path
	// (POST /fileTree)
	PostFileTree(ctx context.Context, request PostFileTreeRequestObject) (PostFileTreeResponseObject, error)
	// Delete path
	// (DELETE /fileTree/{path})
	DeleteFileTreePath(ctx context.Context, request DeleteFileTreePathRequestObject) (DeleteFileTreePathResponseObject, error)
	// List nested paths
	// (GET /fileTree/{path})
	GetFileTreePath(ctx context.Context, request GetFileTreePathRequestObject) (GetFileTreePathResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetFileFilePath operation middleware
func (sh *strictHandler) GetFileFilePath(w http.ResponseWriter, r *http.Request, filePath string) {
	var request GetFileFilePathRequestObject

	request.FilePath = filePath

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetFileFilePath(ctx, request.(GetFileFilePathRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetFileFilePath")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetFileFilePathResponseObject); ok {
		if err := validResponse.VisitGetFileFilePathResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutFileFilePath operation middleware
func (sh *strictHandler) PutFileFilePath(w http.ResponseWriter, r *http.Request, filePath string) {
	var request PutFileFilePathRequestObject

	request.FilePath = filePath

	request.Body = r.Body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PutFileFilePath(ctx, request.(PutFileFilePathRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutFileFilePath")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PutFileFilePathResponseObject); ok {
		if err := validResponse.VisitPutFileFilePathResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetFileTree operation middleware
func (sh *strictHandler) GetFileTree(w http.ResponseWriter, r *http.Request) {
	var request GetFileTreeRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetFileTree(ctx, request.(GetFileTreeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetFileTree")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetFileTreeResponseObject); ok {
		if err := validResponse.VisitGetFileTreeResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostFileTree operation middleware
func (sh *strictHandler) PostFileTree(w http.ResponseWriter, r *http.Request) {
	var request PostFileTreeRequestObject

	var body PostFileTreeJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostFileTree(ctx, request.(PostFileTreeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostFileTree")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostFileTreeResponseObject); ok {
		if err := validResponse.VisitPostFileTreeResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteFileTreePath operation middleware
func (sh *strictHandler) DeleteFileTreePath(w http.ResponseWriter, r *http.Request, path string) {
	var request DeleteFileTreePathRequestObject

	request.Path = path

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteFileTreePath(ctx, request.(DeleteFileTreePathRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteFileTreePath")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteFileTreePathResponseObject); ok {
		if err := validResponse.VisitDeleteFileTreePathResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetFileTreePath operation middleware
func (sh *strictHandler) GetFileTreePath(w http.ResponseWriter, r *http.Request, path string) {
	var request GetFileTreePathRequestObject

	request.Path = path

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetFileTreePath(ctx, request.(GetFileTreePathRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetFileTreePath")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetFileTreePathResponseObject); ok {
		if err := validResponse.VisitGetFileTreePathResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xWTVPbPBD+K3r37QFmPHEoXOobDNBhhqEZaE/AQbU2QR1bUqV1IZPxf++sbJI4CZjy",
	"0XJJbFm7z+p59kMzyG3prEFDAbIZeAzOmoDx5UCqc/xZYSB+y60hNPFROlfoXJK2Jv0RrOG1kN9gKfnp",
	"g8cxZPB/unCdNl9DeuS99VDXdQIKQ+61YyeQMZbwDZjYuoIza0Rhc1kIJ+lmcAXCesHLJFwhtUkJ70iM",
	"dYGDK9iGOmGLUzYYSbp5+3C78TE+455ZOraVUW+Pz2jCWBLjiMcbWht22ZhlM3DeOvSkGz1LDEFOkB9p",
	"6hAyCOS1mURzJl97VJBdzjde1wkc6wK/esQjQ3667lOHQ+2XPH63tkBpmBHXKoF3snQFf0x5KSWbsnCQ",
	"9EQR7ZMWYTmUe4m7kbwK3HXkWpuxZVddzhlehGkgLMU55+n+6ER8cWj4PzjMGUJThI57L5q9+6MTSOAX",
	"+tD4GQ52BkMmyDo00mnIYHcwHOxCQ1k8TAw5nfEvn7bmtQnGbOIzx1w6UZDBZyTGOm43Rh9elkjoA2SX",
	"M9AM2VJpZMnBjRebFwSQrzBZSssFjcssiq3KFwJNbpU2E2EQFar/tjeQe510m8nH4XClLBaF3C2IVU9r",
	"yX9R5TmGwBTuNV431dAcPV3qY9Fkr9+kU82xuqqylFwAcGhvTWGlWm1EMeWrDRKNqvcsUeTlwKrpc9Wp",
	"Nwv9niT75pQkbFWqk6a6uJP0lVXc05vIj/d3TViGvkbf7bL1XCvpvZw+WgOdg57qQHEiBaGN8NZG+pwN",
	"m9LShu4ZH8qE54+vlVNtypWdVweLZfPQyMw9SkL15Dzs3Cqi0ae/NNxl4VGqqcA7HWhV532lhMHb9vKx",
	"nNHpzN3PC4UFEq4LfxjXO3S9MMVfIsufdoZ1RV7YziMb82tcXzd4DbreuCP8IyJj7zEYCFXTgpo7YN+k",
	"c0+fcukzx1xd178DAAD//3pC0InoDAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
