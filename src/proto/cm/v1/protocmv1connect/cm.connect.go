// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/cm/v1/cm.proto

package protocmv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/campaign-manager/src/proto/cm/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// CampaignManagerServiceName is the fully-qualified name of the CampaignManagerService service.
	CampaignManagerServiceName = "proto.cm.v1.CampaignManagerService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CampaignManagerServicePingProcedure is the fully-qualified name of the CampaignManagerService's
	// Ping RPC.
	CampaignManagerServicePingProcedure = "/proto.cm.v1.CampaignManagerService/Ping"
	// CampaignManagerServiceNewProjectProcedure is the fully-qualified name of the
	// CampaignManagerService's NewProject RPC.
	CampaignManagerServiceNewProjectProcedure = "/proto.cm.v1.CampaignManagerService/NewProject"
	// CampaignManagerServiceGetSettingsProcedure is the fully-qualified name of the
	// CampaignManagerService's GetSettings RPC.
	CampaignManagerServiceGetSettingsProcedure = "/proto.cm.v1.CampaignManagerService/GetSettings"
	// CampaignManagerServiceSetSettingsProcedure is the fully-qualified name of the
	// CampaignManagerService's SetSettings RPC.
	CampaignManagerServiceSetSettingsProcedure = "/proto.cm.v1.CampaignManagerService/SetSettings"
	// CampaignManagerServiceGetLsfJobsProcedure is the fully-qualified name of the
	// CampaignManagerService's GetLsfJobs RPC.
	CampaignManagerServiceGetLsfJobsProcedure = "/proto.cm.v1.CampaignManagerService/GetLsfJobs"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	campaignManagerServiceServiceDescriptor           = v1.File_proto_cm_v1_cm_proto.Services().ByName("CampaignManagerService")
	campaignManagerServicePingMethodDescriptor        = campaignManagerServiceServiceDescriptor.Methods().ByName("Ping")
	campaignManagerServiceNewProjectMethodDescriptor  = campaignManagerServiceServiceDescriptor.Methods().ByName("NewProject")
	campaignManagerServiceGetSettingsMethodDescriptor = campaignManagerServiceServiceDescriptor.Methods().ByName("GetSettings")
	campaignManagerServiceSetSettingsMethodDescriptor = campaignManagerServiceServiceDescriptor.Methods().ByName("SetSettings")
	campaignManagerServiceGetLsfJobsMethodDescriptor  = campaignManagerServiceServiceDescriptor.Methods().ByName("GetLsfJobs")
)

// CampaignManagerServiceClient is a client for the proto.cm.v1.CampaignManagerService service.
type CampaignManagerServiceClient interface {
	Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error)
	NewProject(context.Context, *connect.Request[v1.NewProjectRequest]) (*connect.Response[v1.NewProjectResponse], error)
	GetSettings(context.Context, *connect.Request[v1.GetSettingsRequest]) (*connect.Response[v1.GetSettingsResponse], error)
	SetSettings(context.Context, *connect.Request[v1.SetSettingsRequest]) (*connect.Response[v1.SetSettingsResponse], error)
	GetLsfJobs(context.Context, *connect.Request[v1.GetLsfJobsRequest]) (*connect.Response[v1.GetLsfJobsResponse], error)
}

// NewCampaignManagerServiceClient constructs a client for the proto.cm.v1.CampaignManagerService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCampaignManagerServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CampaignManagerServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &campaignManagerServiceClient{
		ping: connect.NewClient[v1.PingRequest, v1.PingResponse](
			httpClient,
			baseURL+CampaignManagerServicePingProcedure,
			connect.WithSchema(campaignManagerServicePingMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		newProject: connect.NewClient[v1.NewProjectRequest, v1.NewProjectResponse](
			httpClient,
			baseURL+CampaignManagerServiceNewProjectProcedure,
			connect.WithSchema(campaignManagerServiceNewProjectMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getSettings: connect.NewClient[v1.GetSettingsRequest, v1.GetSettingsResponse](
			httpClient,
			baseURL+CampaignManagerServiceGetSettingsProcedure,
			connect.WithSchema(campaignManagerServiceGetSettingsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		setSettings: connect.NewClient[v1.SetSettingsRequest, v1.SetSettingsResponse](
			httpClient,
			baseURL+CampaignManagerServiceSetSettingsProcedure,
			connect.WithSchema(campaignManagerServiceSetSettingsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getLsfJobs: connect.NewClient[v1.GetLsfJobsRequest, v1.GetLsfJobsResponse](
			httpClient,
			baseURL+CampaignManagerServiceGetLsfJobsProcedure,
			connect.WithSchema(campaignManagerServiceGetLsfJobsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// campaignManagerServiceClient implements CampaignManagerServiceClient.
type campaignManagerServiceClient struct {
	ping        *connect.Client[v1.PingRequest, v1.PingResponse]
	newProject  *connect.Client[v1.NewProjectRequest, v1.NewProjectResponse]
	getSettings *connect.Client[v1.GetSettingsRequest, v1.GetSettingsResponse]
	setSettings *connect.Client[v1.SetSettingsRequest, v1.SetSettingsResponse]
	getLsfJobs  *connect.Client[v1.GetLsfJobsRequest, v1.GetLsfJobsResponse]
}

// Ping calls proto.cm.v1.CampaignManagerService.Ping.
func (c *campaignManagerServiceClient) Ping(ctx context.Context, req *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error) {
	return c.ping.CallUnary(ctx, req)
}

// NewProject calls proto.cm.v1.CampaignManagerService.NewProject.
func (c *campaignManagerServiceClient) NewProject(ctx context.Context, req *connect.Request[v1.NewProjectRequest]) (*connect.Response[v1.NewProjectResponse], error) {
	return c.newProject.CallUnary(ctx, req)
}

// GetSettings calls proto.cm.v1.CampaignManagerService.GetSettings.
func (c *campaignManagerServiceClient) GetSettings(ctx context.Context, req *connect.Request[v1.GetSettingsRequest]) (*connect.Response[v1.GetSettingsResponse], error) {
	return c.getSettings.CallUnary(ctx, req)
}

// SetSettings calls proto.cm.v1.CampaignManagerService.SetSettings.
func (c *campaignManagerServiceClient) SetSettings(ctx context.Context, req *connect.Request[v1.SetSettingsRequest]) (*connect.Response[v1.SetSettingsResponse], error) {
	return c.setSettings.CallUnary(ctx, req)
}

// GetLsfJobs calls proto.cm.v1.CampaignManagerService.GetLsfJobs.
func (c *campaignManagerServiceClient) GetLsfJobs(ctx context.Context, req *connect.Request[v1.GetLsfJobsRequest]) (*connect.Response[v1.GetLsfJobsResponse], error) {
	return c.getLsfJobs.CallUnary(ctx, req)
}

// CampaignManagerServiceHandler is an implementation of the proto.cm.v1.CampaignManagerService
// service.
type CampaignManagerServiceHandler interface {
	Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error)
	NewProject(context.Context, *connect.Request[v1.NewProjectRequest]) (*connect.Response[v1.NewProjectResponse], error)
	GetSettings(context.Context, *connect.Request[v1.GetSettingsRequest]) (*connect.Response[v1.GetSettingsResponse], error)
	SetSettings(context.Context, *connect.Request[v1.SetSettingsRequest]) (*connect.Response[v1.SetSettingsResponse], error)
	GetLsfJobs(context.Context, *connect.Request[v1.GetLsfJobsRequest]) (*connect.Response[v1.GetLsfJobsResponse], error)
}

// NewCampaignManagerServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCampaignManagerServiceHandler(svc CampaignManagerServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	campaignManagerServicePingHandler := connect.NewUnaryHandler(
		CampaignManagerServicePingProcedure,
		svc.Ping,
		connect.WithSchema(campaignManagerServicePingMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	campaignManagerServiceNewProjectHandler := connect.NewUnaryHandler(
		CampaignManagerServiceNewProjectProcedure,
		svc.NewProject,
		connect.WithSchema(campaignManagerServiceNewProjectMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	campaignManagerServiceGetSettingsHandler := connect.NewUnaryHandler(
		CampaignManagerServiceGetSettingsProcedure,
		svc.GetSettings,
		connect.WithSchema(campaignManagerServiceGetSettingsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	campaignManagerServiceSetSettingsHandler := connect.NewUnaryHandler(
		CampaignManagerServiceSetSettingsProcedure,
		svc.SetSettings,
		connect.WithSchema(campaignManagerServiceSetSettingsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	campaignManagerServiceGetLsfJobsHandler := connect.NewUnaryHandler(
		CampaignManagerServiceGetLsfJobsProcedure,
		svc.GetLsfJobs,
		connect.WithSchema(campaignManagerServiceGetLsfJobsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/proto.cm.v1.CampaignManagerService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CampaignManagerServicePingProcedure:
			campaignManagerServicePingHandler.ServeHTTP(w, r)
		case CampaignManagerServiceNewProjectProcedure:
			campaignManagerServiceNewProjectHandler.ServeHTTP(w, r)
		case CampaignManagerServiceGetSettingsProcedure:
			campaignManagerServiceGetSettingsHandler.ServeHTTP(w, r)
		case CampaignManagerServiceSetSettingsProcedure:
			campaignManagerServiceSetSettingsHandler.ServeHTTP(w, r)
		case CampaignManagerServiceGetLsfJobsProcedure:
			campaignManagerServiceGetLsfJobsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCampaignManagerServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCampaignManagerServiceHandler struct{}

func (UnimplementedCampaignManagerServiceHandler) Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.cm.v1.CampaignManagerService.Ping is not implemented"))
}

func (UnimplementedCampaignManagerServiceHandler) NewProject(context.Context, *connect.Request[v1.NewProjectRequest]) (*connect.Response[v1.NewProjectResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.cm.v1.CampaignManagerService.NewProject is not implemented"))
}

func (UnimplementedCampaignManagerServiceHandler) GetSettings(context.Context, *connect.Request[v1.GetSettingsRequest]) (*connect.Response[v1.GetSettingsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.cm.v1.CampaignManagerService.GetSettings is not implemented"))
}

func (UnimplementedCampaignManagerServiceHandler) SetSettings(context.Context, *connect.Request[v1.SetSettingsRequest]) (*connect.Response[v1.SetSettingsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.cm.v1.CampaignManagerService.SetSettings is not implemented"))
}

func (UnimplementedCampaignManagerServiceHandler) GetLsfJobs(context.Context, *connect.Request[v1.GetLsfJobsRequest]) (*connect.Response[v1.GetLsfJobsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.cm.v1.CampaignManagerService.GetLsfJobs is not implemented"))
}
